```json
{
  "title": "Advanced C++ Programming",
  "description": "This 5-day course covers advanced C++ topics, building upon a foundational understanding of the language.  Each lesson includes a short video for focused learning and practice questions to solidify your understanding.",
  "course_duration_days": 5,
  "lessons": [
    {
      "title": "Advanced Memory Management: Smart Pointers",
      "youtube_search_query": "C++ smart pointers unique_ptr shared_ptr weak_ptr tutorial",
      "duration_seconds": 900,
      "order": 1,
      "questions": [
        {
          "question": "What is the primary advantage of using smart pointers over raw pointers?",
          "choices": [
            "Increased execution speed",
            "Simplified memory allocation",
            "Automatic memory management",
            "Improved code readability"
          ],
          "correct_index": 2
        },
        {
          "question": "Which smart pointer type provides exclusive ownership of a dynamically allocated object?",
          "choices": [
            "shared_ptr",
            "weak_ptr",
            "unique_ptr",
            "auto_ptr"
          ],
          "correct_index": 2
        }
      ]
    },
    {
      "title": "Templates and Generic Programming",
      "youtube_search_query": "C++ templates function templates class templates tutorial",
      "duration_seconds": 1000,
      "order": 2,
      "questions": [
        {
          "question": "What is the purpose of templates in C++?",
          "choices": [
            "To create more concise code",
            "To write code that can work with different data types",
            "To improve program speed",
            "To simplify debugging"
          ],
          "correct_index": 1
        },
        {
          "question": "Explain the difference between function templates and class templates.",
          "choices": [
            "Function templates work with functions, class templates with classes.  There is no other difference.",
            "Function templates create functions, class templates create classes.  They are similar except for this.",
            "They are functionally identical.  The naming convention is purely stylistic.",
            "Function templates generate code for different types, class templates create reusable class structures for different types."
          ],
          "correct_index": 3
        }
      ]
    },
    {
      "title": "Operator Overloading",
      "youtube_search_query": "C++ operator overloading example tutorial",
      "duration_seconds": 800,
      "order": 3,
      "questions": [
        {
          "question": "Why is operator overloading useful?",
          "choices": [
            "To make code more concise and readable",
            "To improve performance",
            "To enable user-defined types to work seamlessly with built-in operators",
            "To bypass type checking"
          ],
          "correct_index": 2
        }
      ]
    },
    {
      "title": "Inheritance and Polymorphism",
      "youtube_search_query": "C++ inheritance polymorphism virtual functions explained",
      "duration_seconds": 1200,
      "order": 4,
      "questions": [
        {
          "question": "What is the difference between public, private, and protected inheritance?",
          "choices": [
            "They are merely stylistic choices with no functional difference.",
            "They determine the accessibility of inherited members from outside the class hierarchy.",
            "They control memory allocation and deallocation.",
            "They define the order in which base class constructors are called."
          ],
          "correct_index": 1
        }
      ]
    },
    {
      "title": "Standard Template Library (STL) Advanced Techniques",
      "youtube_search_query": "C++ STL advanced algorithms lambda functions explained",
      "duration_seconds": 1100,
      "order": 5,
      "questions": [
        {
          "question": "What is the purpose of the STL algorithms?",
          "choices": [
            "To reduce code complexity",
            "To implement data structures",
            "To provide efficient, pre-written solutions to common programming tasks",
            "To simplify debugging"
          ],
          "correct_index": 2
        }
      ]
    }
  ]
}
```
